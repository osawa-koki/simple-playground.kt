package `$05_if`

fun main() {
  // ===== ===== ===== ===== =====
  // if
  // ===== ===== ===== ===== =====

  // ifは、以下のように書きます。
  // if (条件式) {
  //   条件式がtrueの場合の処理
  // } else {
  //   条件式がfalseの場合の処理
  // }

  val _int: Int = 1
  if (_int == 1) {
    println("int is 1")
  } else {
    println("int is not 1")
  }

  // ========== ========== ==========

  // ifの条件式には、以下のようなものが使えます。
  // - 比較演算子
  // - 論理演算子
  // - 範囲演算子
  // - nullチェック

  // ========== ========== ==========

  // ifの条件式には、以下のようなものが使えます。
  // - 比較演算子

  // 比較演算子は、以下のようなものがあります。
  // 他の言語と同じです。
  // - ==
  // - !=
  // - >
  // - <
  // - >=
  // - <=

  // ========== ========== ==========

  // ifの条件式には、以下のようなものが使えます。
  // - 論理演算子

  // 論理演算子は、以下のようなものがあります。
  // 他の言語と同じです。
  // - &&
  // - ||
  // - !

  // ========== ========== ==========

  // ifの条件式には、以下のようなものが使えます。
  // - 範囲演算子

  // 範囲演算子は、以下のようなものがあります。
  // 他の言語にはないですかね???
  // 僕が大好きなC#では7.0で新しく導入されました。
  // - in
  // - !in

  // inは、以下のように使います。
  // if (変数 in 範囲) {
  //   変数が範囲内の場合の処理
  // } else {
  //   変数が範囲外の場合の処理
  // }

  // !inは、以下のように使います。
  // if (変数 !in 範囲) {
  //   変数が範囲外の場合の処理
  // } else {
  //   変数が範囲内の場合の処理
  // }

  val _int2: Int = 1
  if (_int2 in 1..10) {
    println("int2 is in 1..10")
  } else {
    println("int2 is not in 1..10")
  }

  val _int3: Int = 1
  if (_int3 !in 1..10) {
    println("int3 is not in 1..10")
  } else {
    println("int3 is in 1..10")
  }

  // ========== ========== ==========

  // ifの条件式には、以下のようなものが使えます。
  // - nullチェック

  // nullチェックは、以下のように書きます。
  // 変数名?.メソッド名()
  // 変数名?.プロパティ名

  // 詳しくはnullの章で解説します。

  // ========== ========== ==========

  // Kotlinではifは式です。
  // つまり、ifの結果を変数に代入できます。
  // 以下のように書きます。

  val _int4: Int = if (true) {
    1
  } else {
    2
  }
  println(_int4)

  // 最後の式がifの結果になります。
  // 以下のように書いても同じです。

  val _int5: Int = if (true) {
    999
    999
    999
    1
  } else {
    999
    999
    999
    2
  }
  println(_int5)
}
